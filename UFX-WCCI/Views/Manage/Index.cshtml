@model UFX_WCCI.Models.IndexViewModel
<br />
<br />
@{

    ViewBag.Title = "Manage Profile";
}
@*Need hidden input fields; input type=hidden
    instead of document.getelementById, look at forms and change value of form field. Its Id will be document.getElementById.Latitude?
*@

<h2>@ViewBag.Title</h2>

<div class="col-md-6">

    <br />
    <div class="w3-card-4" style="height:200px">
        <div class="w3-container">
            <div class="row">
                <div class="col-md-4">
                    <p>
                        <h2>@Model.UserName</h2>
                    </p>

                    @if (Model.PhotoName != null) {
                        <img id="output" src="/AvatarFile?id=@Model.Id" height="100" />
                    }
                    else
                    {
                        <h3>Please choose profile picture</h3>
                        <img id="output" height="100" />
                    }
                    @*<img src="~/AvatarFile?id=@Model.Id" alt="Post Picture" class="w3-left w3-accordion w3-margin-right" style="width:60px" />*@
                    @*<img src="img_avatar3.png" alt="Avatar" class="w3-left w3-circle w3-margin-right" style="width:60px">*@
                </div>
                <div class="col-md-8">
                    <div class="w3-left-align">
                        <br />
                        <br />
                        <div>
                            @if (Model.Email != null)
                            {
                                <div id="newEmail"> @Model.Email </div>
                            }
                        </div>
                        <br />
                        <div id="newBio">@Model.Bio</div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <h3><bold> Click and drag the pin to change your location</bold></h3>
    <div id="mapholder"></div>
    
</div>



<div class="col-md-6">
    @using (Html.BeginForm("EditProfile", "Manage", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="form-group">
            <h3>Change your account settings</h3>

            <div>
                Password:
                [
                @if (Model.HasPassword)
                {
                    @Html.ActionLink("Change your password", "ChangePassword")
                }
                else
                {
                    @Html.ActionLink("Create", "SetPassword")
                }
                ]
            </div>
            <br />

            <br />
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            <script>
                var formEmail = document.getElementById("Email");
                formEmail.addEventListener("change",function(){
                    newEmail=document.getElementById("newEmail");
                    newEmail.innerHTML = formEmail.value;});
            </script>
            <br />
            @Html.LabelFor(model => model.Bio, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Bio, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Bio, "", new { @class = "text-danger" })
            <script>
                var formBio = document.getElementById("Bio");
                formBio.addEventListener("change",function(){
                    newBio = document.getElementById("newBio");
                    newBio.innerHTML = formBio.value;});
            </script>


            <br />

            <div>
                @Html.Label("Change Profile Picture", new { @class = "control-label" })

                <input type="file" name="upload" accept="image/*" id="Avatar" onchange="loadFile(event)">

                <script>
                    var loadFile = function(event) {
                        var output = document.getElementById('output');
                        output.src = URL.createObjectURL(event.target.files[0]);
                    };
                </script>
            </div>
            <br />

        </div>
        <br />
        <div class="hide">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })

            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <div class="col-md-10">
                <input id="createbutton" type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    }

   
    <!-- end Profile Picture -->

</div>








@*Map info---------------------------------------------------------------------------*@
@*displays map and markers accordingly after running all code below*@

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB5S4xfOJQI291tx5TYC_B3k8dycPQnIzQ&callback=getLocation"
        defer></script>
@*<script type="text/javascript" src="https://maps.google.com/maps/api/js?key=AIzaSyB5S4xfOJQI291tx5TYC_B3k8dycPQnIzQ"></script>*@
<script type="text/javascript">


    var map;
    var markers = [];
    var newposition = false;


    initialize();
    getLocation();

    function initialize() {

        //navigator.geolocation;
        //navigator.geolocation.getCurrentPosition();


        //if no lat/lon entered get current coords, otherwise get from user profile
        if (@Model.Latitude == 0){
            lat = 41.1618538;
            lon = -80.69716;
            newposition = true;
        }
        else {
            lat = @Model.Latitude;
            lon = @Model.Longitude;
        };

        var myOptions = {
            zoom: 10,
            center: new google.maps.LatLng(lat,lon),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }

        map = new google.maps.Map(document.getElementById("mapholder"), myOptions);

        addMarker(new google.maps.LatLng(lat, lon), "You are here!");
    }

    function addMarker(latlng, myTitle) {
        markers.push(new google.maps.Marker({
            position: latlng,
            map: map,
            title: myTitle,
            icon: "https://maps.google.com/mapfiles/marker" + String.fromCharCode(markers.length + 65) + ".png"
        }));
    }

    //Finds users initial location based on device location
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        if (newposition){
            lat = 41.1618538;
            lon = -80.69716;
        }
        else
        {
            lat = @Model.Latitude;
            lon = @Model.Longitude;
        };
        latlon = new google.maps.LatLng(lat, lon)
        mapholder = document.getElementById('mapholder')
        mapholder.style.height = '250px';
        mapholder.style.width = '500px';

        //Pulls initial values from above function and displays them in Lat/Long boxes
        document.getElementById("Latitude").value = lat;
        document.getElementById("Longitude").value = lon;

        //Finds user designated location by allowing user to drag pin/marker on map. overrides initial location

        //Allows tweaking of map details and presentation (I think)
        var myOptions = {

            center: latlon, zoom: 14,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL }
        }

        var map = new google.maps.Map(document.getElementById("mapholder"), myOptions);
        //Code for marker and ability to drag marker to designate place
        var marker = new google.maps.Marker({
            position: latlon,
            map: map,
            draggable: true,
            title: "You are here!"
        });
        google.maps.event.addListener(marker, 'dragend', function (a) {
            console.log(a);
            var ulat = a.latLng.lat();
            var ulon = a.latLng.lng();
            console.log(ulat);
            console.log(ulon);

            //Pulls user selected values from above function and displays them in Lat/Long boxes
            document.getElementById("Latitude").value = ulat;
            document.getElementById("Longitude").value = ulon;
        });


    }
    //Error related code when user has no location or denies access
    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                x.innerHTML = "User denied the request for Geolocation."
                break;
            case error.POSITION_UNAVAILABLE:
                x.innerHTML = "Location information is unavailable."
                break;
            case error.TIMEOUT:
                x.innerHTML = "The request to get user location timed out."
                break;
            case error.UNKNOWN_ERROR:
                x.innerHTML = "An unknown error occurred."
                break;
        }
    }
</script>
